pm <- c(15, 14)
impact_factor(pm)
impact_factor <- function(delta_pm,
lag_structure,
RR = 1.062, unit = 10){
# Create a variable that allows us to get all the variables the right length
duration <- 120
pm <- c(0, delta_pm, rep(delta_pm[length(delta_pm)], duration - length(delta_pm)))
# Calculate the year-to-year change in PM concentration.
change <- diff(pm)
# Which years have a change in PM concentration?
years <- which(change != 0)
# Make a matrix of the PM2.5 concentration adjusted for the lag effect
x <- matrix(0, duration, duration)
for(i in seq_len(duration)){
x[i, ] <- c(rep(0, i - 1),
head(lag_structure, duration - i), # If we're getting to the end of the row the lag has to be cut.
rep(1, length(change) - i + 1 - length(head(lag_structure, duration - i)))
)
}
x <- x * change  # lag x the change in concentration
x <- colSums(x)   # Total effect in each year
# Calculate the impact factor
IF <- 1 / RR^(x/unit)
IF
}
impact_factor(pm)
lag_struction <- 1
impact_factor(pm)
lag_structure <- 1
impact_factor(pm)
impact_factor(pm, lag)
lag <- 1
impact_factor(pm, lag)
delta_pm <- 1
pm <- c(0, delta_pm, rep(delta_pm[length(delta_pm)], duration - length(delta_pm)))
duration <- 120
pm <- c(0, delta_pm, rep(delta_pm[length(delta_pm)], duration - length(delta_pm)))
pm
change <- diff(pm)
change
x <- matrix(0, duration, duration)
for(i in seq_len(duration)){
x[i, ] <- c(rep(0, i - 1),
head(lag_structure, duration - i), # If we're getting to the end of the row the lag has to be cut.
rep(1, length(change) - i + 1 - length(head(lag_structure, duration - i)))
)
}
x
x <- x * change  # lag x the change in concentration
x
impact_factor <- function(delta_pm = 1,
lag_structure = 1,
RR = 1.062, unit = 10){
# Create a variable that allows us to get all the variables the right length
duration <- 120
pm <- c(0, delta_pm, rep(delta_pm[length(delta_pm)], duration - length(delta_pm)))
# Calculate the year-to-year change in PM concentration.
change <- diff(pm)
# Which years have a change in PM concentration?
# years <- which(change != 0)
# Make a matrix of the PM2.5 concentration adjusted for the lag effect
x <- matrix(0, duration, duration)
for(i in seq_len(duration)){
x[i, ] <- c(rep(0, i - 1),
head(lag_structure, duration - i), # If we're getting to the end of the row the lag has to be cut.
rep(1, length(change) - i + 1 - length(head(lag_structure, duration - i)))
)
}
x <- x * change  # lag times the change in concentration
x <- colSums(x)   # Total effect in each year
# Calculate the impact factor
IF <- 1 / RR^(x/unit)
IF
}
impact_factor <- function(delta_pm = 1,
lag_structure = 1,
RR = 1.06, unit = 10){
# Create a variable that allows us to get all the variables the right length
duration <- 120
pm <- c(0, delta_pm, rep(delta_pm[length(delta_pm)], duration - length(delta_pm)))
# Calculate the year-to-year change in PM concentration.
change <- diff(pm)
# Which years have a change in PM concentration?
# years <- which(change != 0)
# Make a matrix of the PM2.5 concentration adjusted for the lag effect
x <- matrix(0, duration, duration)
for(i in seq_len(duration)){
x[i, ] <- c(rep(0, i - 1),
head(lag_structure, duration - i), # If we're getting to the end of the row the lag has to be cut.
rep(1, length(change) - i + 1 - length(head(lag_structure, duration - i)))
)
}
x <- x * change  # lag times the change in concentration
x <- colSums(x)   # Total effect in each year
# Calculate the impact factor
IF <- 1 / RR^(x/unit)
IF
}
impact_factor()
impact_factor()
epa_lag <- cumsum(c(0.3, rep(0.5, 4), rep(0.2/15, 15)))
impact_factor(lag_structure = epa_lag)
pm <- rev(seq(15, 14, 0.1))
pm <- rev(seq(15, 14, 0.1))
pm <- rev(seq(0.1, 1, 0.1))
pm
pm <- seq(0.1, 1, 0.1)
pm
linear_lag <- seq(0.1, 1, 5)
impact_factor(pm, linear_lag)
data("data/aus_deaths)
data("data/aus_deaths")
data("aus_deaths")
aus_deaths
data("single_year_data")
single_year_data
impact  <- function(population, deaths,
delta_pm = 1,
lag_structure = 1,
RR = 1.06, unit = 10,
max_age = 105, base_year = 2013){
# First estimate the impact factor
IF <- impact_factor(delta_pm = delta_pm, lag_structure = lag_structure,
RR = RR, unit = unit)
# Functions -----------------------------------------
# Calculate the survival propbability from age 0 - 105.
survival_probability <- function(IF) {
# Extend the hazard by repeating hazard in the final age group to length 106
qx <- c(qx, rep(qx[length(qx)], max_age + 1 - length(qx)))
# Mulitply ages 30+ by the impact factor
qx[31:length(qx)] <- qx[31:length(qx)] * IF
# Calculate the surival probability in the IOMLIFET way
sx <- (2 - qx) / (2 + qx)
sx[length(sx)] <- 0
sx
}
# Make a Leslie matrix to transform the current population
survival_diag <- function(IF){
# Calculate the survival probability
sx <- survival_probability(IF)
# Make the diagonal
sx_diag <- diag(head(sx, - 1))
# Make a vector that goes 1, 0, 0 ... and make it the first row
r1 <- rep(c(1,0), c(1, max_age - 1))
sx_diag <- cbind(rbind(r1, sx_diag), rep(0, max_age + 1))
sx_diag
}
# Make a matrix of future population by age and calendar year
population_matrix <- function(IFs) {
# Make a list of Leslie matrices
sx_diags <- lapply(IFs, survival_diag)
# Empty matrix to which the transformed popualtion data will be added
pop_mat <- matrix(0, ncol = length(sx_diags) + 1, nrow = nrow(sx_diags[[1]]))
# Baseline populaiton (0 in age-groups older than we have data for)
nx <- c(population, rep(0, nrow(sx_diags[[1]]) - length(population)))
pop_mat[, 1] <- nx
for(i in seq_along(sx_diags)){
pop_mat[, i + 1] <- sx_diags[[i]] %*% pop_mat[, i]
}
pop_mat <- pop_mat[, -ncol(pop_mat)]
colnames(pop_mat) <- base_year:(base_year + 119)
rownames(pop_mat) <- 0:max_age
pop_mat
}
# Calculate results --------------------------------------------------
# Make matrices of the surival probability of the baseline and impacted
# populations
qx <- deaths/population
sx_mat <- sapply(rep(1, length(IF)), FUN = survival_probability)
sx_mat_i <- sapply(IF, FUN = survival_probability)
# Make matricies of the baseline and impacted populations
baseline_pop <- population_matrix(rep(1, length(IF)))
impacted_pop <- population_matrix(IF)
# Calculate number of deaths
baseline_deaths <- baseline_pop * (1 - sx_mat)
impacted_deaths <- impacted_pop * (1 - sx_mat_i)
diff_deaths <- baseline_deaths - impacted_deaths
# Calculate number of deaths among current cohort
diff_deaths_current <- diff_deaths
diff_deaths_current[upper.tri(diff_deaths_current)] <- 0
# Calculate number of life years (population x half the number of deaths in a
# given year)
baseline_ly <- baseline_pop - 0.5 * baseline_deaths
impacted_ly <- impacted_pop - 0.5 * impacted_deaths
diff_ly <- impacted_ly - baseline_ly
# And life years among the current cohort
diff_ly_current <- diff_ly
diff_ly_current[upper.tri(diff_ly_current)] <- 0
data.frame(
year = base_year:(base_year + 119),
deaths = colSums(diff_deaths),
deaths_current = colSums(diff_deaths_current),
ly = colSums(diff_ly),
ly_current = colSums(diff_ly_current)
)
}
data("single_year_data")
head(single_year_data)
total_pop <- subset(single_year_data, time == 2011 & sex == Persons")
total_pop <- subset(single_year_data, time == 2011 & sex == Persons")
)
total_pop <- subset(single_year_data, time == 2011 & sex == "Persons")
total_pop
population <- subset(single_year_data, time == 2011 & sex == "Persons", measure == "Population")
population
population <- subset(single_year_data, time == 2011 & sex == "Persons"& measure == "Population")
population <- subset(single_year_data,
time == 2011 & sex == "Persons"& measure == "Population")
population
population <- subset(single_year_data,
time == 2011 & sex == "Persons"& measure == "Population",
select = value)
population
deaths <- subset(single_year_data,
time == 2011 & sex == "Persons"& measure == "Deaths",
select = value)
deaths
impact(population, deaths)
delta_pm = 1
lag_structure = 1
unit = 10
RR = 1.06
IF <- impact_factor(delta_pm = delta_pm, lag_structure = lag_structure,
RR = RR, unit = unit)
IF
qx <- deaths/population
qx
survival_probability <- function(IF) {
# Extend the hazard by repeating hazard in the final age group to length 106
qx <- c(qx, rep(qx[length(qx)], max_age + 1 - length(qx)))
# Mulitply ages 30+ by the impact factor
qx[31:length(qx)] <- qx[31:length(qx)] * IF
# Calculate the surival probability in the IOMLIFET way
sx <- (2 - qx) / (2 + qx)
sx[length(sx)] <- 0
sx
}
IF
survival_probability(IF)
max_age <- 105
survival_probability(IF)
qx <- c(qx, rep(qx[length(qx)], max_age + 1 - length(qx)))
qx
qx
qx <- deaths/population
qx
deaths
str(deaths)
population <- subset(single_year_data,
time == 2011 & sex == "Persons"& measure == "Population",
select = value)
deaths <- subset(single_year_data,
time == 2011 & sex == "Persons"& measure == "Deaths",
select = value)
deaths
str(deaths)
str(single_year_data)
x <- data.frame(single_year_data)
x
str(single_year_data)
str(x)
population <- subset(single_year_data,
time == 2011 & sex == "Persons"& measure == "Population",
select = value)
population
str(population)
population <- subset(x,
time == 2011 & sex == "Persons"& measure == "Population",
select = value)
str(population)
x
population <- subset(single_year_data,
time == 2011 & sex == "Persons"& measure == "Population",
select = value)[,1]
population
population <- subset(single_year_data,
time == 2011 & sex == "Persons"& measure == "Population")
population <- population[, "value"]
deaths <- subset(single_year_data,
time == 2011 & sex == "Persons"& measure == "Deaths")
deaths <- deaths[, "value]
population <- subset(single_year_data,
time == 2011 & sex == "Persons"& measure == "Population")
population <- population[, "value"]
deaths <- subset(single_year_data,
time == 2011 & sex == "Persons"& measure == "Deaths")
deaths <- deaths[, "value]
deaths <- deaths[, "value"]
deaths
population
impact(population, deaths)
x <- impact(population, deaths)
plot(x$deaths)
plot(x$lys)
plot(x$ly)
plot(x$deaths, x$deaths_current)
plot(x$deaths_current)
plot(x$deaths)
points(x$deaths_current)
plot(x$deaths_current)
points(x$deaths)
plot(x$deaths_current)
points(x$deaths, col = "red")
plot(x$ly_current)
points(x$ly, col = "red")
no_lag <- impact(population, deaths)
no_lag <- impact(population, deaths)
plot(no_lag$deaths_current)
points(no_lag$deaths, col = "red")
plot(no_lag$ly_current)
points(no_lag$ly, col = "red")
par(mfrow = c(2, 1))
plot(no_lag$deaths_current)
points(no_lag$deaths, col = "red")
plot(no_lag$ly_current)
points(no_lag$ly, col = "red")
no_lag <- impact(population, deaths)
head(no_lag)
plot(no_lag$deaths_current, year)
par(mfrow = c(2, 1))
plot(no_lag$deaths_current, year)
plot(no_lag$deaths_current, no_lag$year)
no_lag <- impact(population, deaths)
plot(no_lag$deaths_current, no_lag$year)
no_lag$year
dev.off()
plot(no_lag$deaths_current, no_lag$year)
plot(no_lag$year, no_lag$deaths_current)
no_lag <- impact(population, deaths)
par(mfrow = c(2, 1))
plot(no_lag$year, no_lag$deaths_current)
points(no_lag$year, no_lag$deaths, col = "red")
plot(no_lag$year, no_lag$ly_current)
points(no_lag$year, no_lag$ly, col = "red")
plot(no_lag$year, no_lag$deaths_current,
xlab = "Year", ylab = "Deaths Avoided")
par(mfrow = c(2, 1))
plot(no_lag$year, no_lag$deaths_current,
xlab = "Year", ylab = "Deaths Avoided")
points(no_lag$year, no_lag$deaths, col = "red")
plot(no_lag$year, no_lag$ly_current,
xlab = "Year", ylab = "Life years\ngained")
points(no_lag$year, no_lag$ly, col = "red")
lag_structure <- cumsum(c(0.3, rep(0.5, 4), rep(0.2/15, 15)))
lag <- cumsum(c(0.3, rep(0.5, 4), rep(0.2/15, 15)))
epa_lag <- impact(population, deaths, lag_structure = lag)
plot(epa_lag$year, epa_lag$deaths)
lag
lag <- cumsum(c(0.3, rep(0.5/4, 4), rep(0.2/15, 15)))
lag
epa_lag <- impact(population, deaths, lag_structure = lag)
plot(epa_lag$year, epa_lag$deaths)
points(no_lag$year, no_lag$deaths, col = "red")
lag_structure <- lag
IF <- impact_factor(delta_pm = delta_pm, lag_structure = lag_structure,
RR = RR, unit = unit)
IF
pm
delta_pm
epa_lag
plot(no_lag$year, no_lag$deaths, col = "red")
points(epa_lag$year, epa_lag$deaths)
plot(no_lag$year, no_lag$ly, col = "red")
points(epa_lag$year, epa_lag$ly)
slow_pm <- impact(population, deaths, delta_pm = pm, lag_structure = lag)
plot(no_lag$year, no_lag$deaths, col = "red")
points(epa_lag$year, epa_lag$deaths)
popints(slow_pm$year, slow_pm$deaaths, col = "blue")
points(slow_pm$year, slow_pm$deaaths, col = "blue")
points(slow_pm$year, slow_pm$deaths, col = "blue")
plot(no_lag$year, no_lag$ly, col = "red")
points(epa_lag$year, epa_lag$ly)
points(slow_pm$year, slow_pm$ly, col = "blue")
plot(no_lag$year, no_lag$deaths)
points(epa_lag$year, epa_lag$deaths, col = "red")
points(slow_pm$year, slow_pm$deaths, col = "blue")
plot(no_lag$year, no_lag$ly)
points(epa_lag$year, epa_lag$ly, col = "red")
points(slow_pm$year, slow_pm$ly, col = "blue")
plot(no_lag$year, no_lag$deaths, type = "l")
line(epa_lag$year, epa_lag$deaths, col = "red")
plot(no_lag$year, no_lag$deaths)
line(epa_lag$year, epa_lag$deaths, col = "red")
plot(no_lag$year, no_lag$deaths)
points(epa_lag$year, epa_lag$deaths, col = "red", pch = 1)
points(epa_lag$year, epa_lag$deaths, col = "red", pch = 4)
dev.off()
plot(no_lag$year, no_lag$deaths)
points(epa_lag$year, epa_lag$deaths, col = "red", pch = 4)
points(epa_lag$year, epa_lag$deaths, col = "red", pch = 5)
points(epa_lag$year, epa_lag$deaths, col = "red", pch = 1)
points(epa_lag$year, epa_lag$deaths, col = "red", pch = 2)
dev.off
dev.off()
plot(no_lag$year, no_lag$deaths)
points(epa_lag$year, epa_lag$deaths, col = "red", pch = 2, cex = 0.2)
plot(no_lag$year, no_lag$deaths, cex = 0.5)
points(epa_lag$year, epa_lag$deaths, col = "red", cex = 0.5)
dev.off()
par(cex = 0.5)
plot(no_lag$year, no_lag$deaths)
points(epa_lag$year, epa_lag$deaths, col = "red")
epa_lag$deaths
par(mfrow = c(2, 1), cex = 0.5)
plot(no_lag$year, no_lag$deaths)
points(epa_lag$year, epa_lag$deaths, col = "red")
points(slow_pm$year, slow_pm$deaths, col = "blue")
plot(no_lag$year, no_lag$ly)
points(epa_lag$year, epa_lag$ly, col = "red")
points(slow_pm$year, slow_pm$ly, col = "blue")
2^0
library(iomlifetR)
install.packages("tufte")
install.packages("bookdown")
install.packages("tint")
source('D:/Dropbox/Work/_PhD/_Core Projects/Paper 1 - Aus Burden - Monitor/Richards Package/iomlifetR/R/burden.R')
example(impact)
example(burden)
source('D:/Dropbox/Work/_PhD/_Core Projects/Paper 1 - Aus Burden - Monitor/Richards Package/iomlifetR/R/burden.R')
source('D:/Dropbox/Work/_PhD/_Core Projects/Paper 1 - Aus Burden - Monitor/Richards Package/iomlifetR/R/impact.R')
example(mean)
rm(list = ls())
source('D:/Dropbox/Work/_PhD/_Core Projects/Paper 1 - Aus Burden - Monitor/Richards Package/iomlifetR/R/data.R')
source('D:/Dropbox/Work/_PhD/_Core Projects/Paper 1 - Aus Burden - Monitor/Richards Package/iomlifetR/R/burden.R')
source('D:/Dropbox/Work/_PhD/_Core Projects/Paper 1 - Aus Burden - Monitor/Richards Package/iomlifetR/R/impact.R')
?example
example(impact)
install(iomlifetR)
install("iomlifetR")
setwd("D:/Dropbox/Work/_PhD/_Core Projects/Paper 1 - Aus Burden - Monitor/Richards Package")
install("iomlifetR")
install("iomlifetR")
wd()
library("devtools")
library(roxygen2)
install.packages("roxygen2")
library(roxygen2)
install("iomlifetR")
example(impact)
install("iomlifetR")
?git_branch
??git_branch
setwd(choose.dir())
install.packages(git2r)
install.packages("git2r")
install.packages("git2r")
library(git2r)
install("iomlifetR")
install("iomlifetR")
library("devtools")
library(roxygen2)
install("iomlifetR")
example(impact)
install("iomlifetR")
??iomlifetR
source('~/.active-rstudio-document')
library("devtools")
library(roxygen2)
# 2. Set working directory as parent of project folder
setwd(choose.dir())
install("iomlifetR")
??git_branch
?git_branch
??git_branch
library(iomlifetR)
example(impact)
?iomlifetR
??iomlifetR
example(burden)
!("devtools" %in% installed.packages()[,"Package"])
if(!("devtools" %in% installed.packages()[,"Package"]))  install.packages("devtools")
if(("roxygen2" %in% installed.packages()[,"Package"])) devtools::install_github("klutometis/roxygen")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("klutometis/roxygen")
library("devtools")
devtools::install_github("klutometis/roxygen")
library("devtools")
library("devtools")
install.packages("devtools")
library("devtools")
# How to install/test "iomlifetR" package
# 1. Auto-install required dev packages
if(!("devtools" %in% installed.packages()[,"Package"])) install.packages("devtools")
library("devtools")
if(!("devtools" %in% installed.packages()[,"Package"]))
if(!("devtools" %in% installed.packages()[,"Package"]))
1
(!("devtools" %in% installed.packages()[,"Package"]))
if(!("devtools" %in% installed.packages()[,"Package"])) install.packages("devtools")
library("devtools")
if(!("roxygen2" %in% installed.packages()[,"Package"])) devtools::install_github("klutometis/roxygen")
library(roxygen2)
# 2. Set working directory as parent of project folder
setwd(choose.dir())
setwd(choose.dir(), caption = "Select parent folder of package project")
setwd(choose.dir(caption = "Select parent folder of package project"))
setwd(choose.dir(caption = "NOTE! - Select parent folder of package project"))
setwd(choose.dir(caption = "NOTE! - Select parent folder of package project\n"))
setwd(choose.dir(caption = "NOTE! - Select parent folder of package project\n\n"))
setwd(choose.dir(caption = "NOTE! - Select parent folder of package project"))
# 3. Install "iomlifetR"
install("iomlifetR")
example(impact)
library(iomlifetR)
??iomlifetR
example(impact)
example(impact)
??iomlifetR
??iomlifetR
?impact
